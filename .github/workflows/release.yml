name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 推送以 v 开头的标签时触发
  workflow_dispatch:  # 允许手动触发

env:
  GO_VERSION: '1.21'
  BINARY_NAME: 'program-manager'

jobs:
  build:
    name: Build Linux AMD64
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Build Linux AMD64
      run: |
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
        go build -ldflags "-s -w -X main.version=${{ github.ref_name }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
        -trimpath -o ${{ env.BINARY_NAME }}-linux-amd64 .

    - name: Create release archive
      run: |
        tar -czf ${{ env.BINARY_NAME }}-${{ github.ref_name }}-linux-amd64.tar.gz \
          ${{ env.BINARY_NAME }}-linux-amd64 \
          README.md \
          LICENSE \
          web/ \
          docs/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BINARY_NAME }}-linux-amd64
        path: ${{ env.BINARY_NAME }}-linux-amd64
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.BINARY_NAME }}-linux-amd64
        path: ./build/

    - name: Generate release notes
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        # Release ${{ github.ref_name }}
        
        ## 🚀 新特性
        - 自动构建的 Linux AMD64 版本
        - 包含完整的 Web 界面
        - 支持程序管理和监控
        
        ## 📦 包含文件
        - `${{ env.BINARY_NAME }}-linux-amd64`: 可执行文件
        - `web/`: Web 界面文件
        - `README.md`: 项目说明文档
        - `docs/`: 技术文档
        
        ## 🔧 使用方法
        1. 下载并解压发布包
        2. 运行 `./${{ env.BINARY_NAME }}-linux-amd64`
        3. 访问 http://localhost:8080 使用 Web 界面
        
        ## 📋 系统要求
        - Linux AMD64 架构
        - 无额外依赖
        
        ## 🔗 更多信息
        查看 [项目文档](https://github.com/${{ github.repository }}/tree/main/docs) 获取详细信息。
        
        ---
        **提交信息**: ${{ github.sha }}
        **构建时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: Release ${{ github.ref_name }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        files: |
          ${{ env.BINARY_NAME }}-${{ github.ref_name }}-linux-amd64.tar.gz
          build/${{ env.BINARY_NAME }}-linux-amd64
        token: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max